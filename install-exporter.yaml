- hosts: all
  become: true

  vars:
    version: 1.0.1
    dest_path: /opt/node_exporter
    textfile_path: /var/lib/node_exporter

  tasks:
    - name: Find Current Architecture version for ARM
      set_fact:
        my_arch: "{{ ansible_facts.architecture | regex_replace('(.*)l$', '\\1') }}"
      when: "'arm' in ansible_facts.architecture"
        
    - name: Set my arch for non x86_64
      set_fact:
        my_arch: amd64
      when: "'x86_64' in ansible_facts.architecture"

    - name: Uncompress Node Exporter
      become: true
      unarchive:
        remote_src: true
        src: https://github.com/prometheus/node_exporter/releases/download/v{{ version }}/node_exporter-{{ version }}.linux-{{ my_arch }}.tar.gz
        dest: /opt/
        creates: /opt/node_exporter-{{ version }}.linux-{{ my_arch }}
      register: uncompress_result
      
    - name: Create versionless symlink
      become: true
      file:
        src: /opt/node_exporter-{{ version }}.linux-{{ my_arch }}
        path: "{{ dest_path }}"
        state: link
      when: uncompress_result is changed

    - name: Create textfile collector directory
      become: true
      file:
        path: "{{ textfile_path }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      when: "'arm' in ansible_facts.architecture"

    - name: Install Raspberry Pi CPU Temp collector
      become: true
      copy:
        dest: "/usr/local/bin/raspi_temp"
        src: files/raspi_temp
        owner: root
        group: root
        mode: '0755'
      when: "'arm' in ansible_facts.architecture"

    - name: Install moreutils
      become: true
      package: 
        name: moreutils
        state: present
      when: "'arm' in ansible_facts.architecture"

    - name: Ensure cronjob for Raspberry Pi CPU Temp
      cron:
        name: "Raspberry Pi CPU Temp"
        minute: "*"
        hour: "*"
        job: "/usr/local/bin/raspi_temp | sponge {{ textfile_path }}/raspi_temp.prom"
      when: "'arm' in ansible_facts.architecture"

    - name: Create systemd unit
      become: true
      template:
        src: templates/node_exporter.service.j2
        dest: /etc/systemd/system/node_exporter.service
        owner: root
        group: root
        mode: '0644'
        force: true
      register: system_register

    - name: Reload systemd
      become: true
      command: systemctl daemon-reload
      when: system_register is changed

    - name: Manage service
      become: true
      service:
        name: node_exporter
        state: restarted
        enabled: true
      when: (system_register is changed) or (uncompress_result is changed)

    - name: Add service to firewall
      become: true
      firewalld:
        immediate: true
        permanent: true
        port: "9100/tcp"
        state: enabled
      when: "'RedHat' in ansible_facts.os_family"